{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","className","align","key","alt","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","performSearch","searchTerm","console","log","fetch","then","response","json","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","event","target","style","color","width","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mSA4BiBA,G,gMApBb,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,I,+BAGrB,OAAO,2BAAOQ,UAAU,UAAUC,MAAM,SAASC,IAAKT,KAAKC,MAAMC,MAAMC,IAC7D,+BACI,4BACA,wBAAII,UAAY,cACZ,yBAAKG,IAAI,SAASC,IAAMX,KAAKC,MAAMC,MAAMU,cAE7C,wBAAIL,UAAW,aACX,4BAAKP,KAAKC,MAAMC,MAAMW,OACtB,2BAAIb,KAAKC,MAAMC,MAAMY,UACrB,2BAAOC,KAAK,SAASC,QAAShB,KAAKiB,UAAUC,KAAKlB,MAAOmB,MAAO,iB,GAlBjEC,IAAMC,YCyFdC,E,YAtFb,WAAYrB,GAAO,IAAD,8BAChB,4CAAMA,KACDsB,MAAQ,GAiBf,EAAKC,cAAc,KAnBD,E,2EAsBNC,GAAY,IAAD,OACrBC,QAAQC,IAAI,kBAQZC,MANgB,4FAA8FH,GAO7GI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,IAAMC,EAAUD,EAAcC,QAC1BC,EAAY,GACD,MAAXD,EAEFA,EAAQE,SAAQ,SAACjC,GACfA,EAAMU,WAAa,kDAAoDV,EAAMkC,YAC7E,IAAMC,EAAW,kBAAC,EAAD,CAAU5B,IAAMP,EAAMC,GAAID,MAAQA,IACnDgC,EAAUI,KAAKD,MAIjB,EAAKb,cAAc,KAEvB,EAAKe,SAAS,CAACC,KAAKN,S,0CAWNO,GAElBf,QAAQC,IAAIc,EAAMC,OAAOvB,OACzB,IACMM,EAAagB,EAAMC,OAAOvB,MADZnB,KAERwB,cAAcC,K,+BAIxB,OACE,yBAAKlB,UAAU,OACX,2BAAOA,UAAY,YACjB,+BACE,4BACE,4BAAI,uBAAGA,UAAU,aAAaJ,GAAG,SAASwC,MAAS,CAACC,MAAM,YAC1D,wBAAIC,MAAM,MACV,gDAKN,2BAAOtC,UAAU,YAAYC,MAAM,SAASsC,SAAU9C,KAAK+C,oBAAoB7B,KAAKlB,MAAOgD,YAAa,sBACzGhD,KAAKuB,MAAMiB,U,GAnFFpB,IAAMC,WCQJ4B,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.66e628bc.chunk.js","sourcesContent":["import React  from 'react';\r\nimport './MovieRow.css';\r\n\r\nclass MovieRow extends React.Component {\r\n\r\n viewMovie(){\r\n    //  console.log(\"View works\")\r\n    //console.log(this.props.movie.title)\r\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n    window.location.href = url\r\n }   \r\n render(){\r\n      return <table className=\"content\" align=\"center\" key={this.props.movie.id}>\r\n                <tbody>\r\n                    <tr>\r\n                    <td className = \"movieImage\">\r\n                        <img alt=\"poster\" src= {this.props.movie.poster_src} />\r\n                    </td>\r\n                    <td className =\"movieInfo\">\r\n                        <h3>{this.props.movie.title}</h3>\r\n                        <p>{this.props.movie.overview}</p>\r\n                        <input type=\"button\" onClick={this.viewMovie.bind(this)} value =\"view\"></input>\r\n                    </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n    } //rende ends\r\n  }//end class\r\n  export default MovieRow","import React  from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {}\n  //console.log(\"This is my initializer\")\n\n  //   const movies = [\n  //                   {id:0, poster_src:\"https://image.tmdb.org/t/p/w185_and_h278_bestv2/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\", title:\"Avengers: Infinity war\", overview:\"Earth's mightiest heroes must come together and learn to fight as a team if they are going to stop the mischievous Loki and his alien army from enslaving humanity. \"},\n  //                   {id:1, poster_src:\"https://image.tmdb.org/t/p/w185_and_h278_bestv2/cezWGskPY5x7GaglTTRN4Fugfb8.jpg\", title:\"The Avengers\", overview:\"Bruce Banner, a scientist on the run from the U.S. Government, must find a cure for the monster he turns into whenever he loses his temper.\"}\n  //                 ]\n\n  //   var movieRows = []\n  //   movies.forEach((movie) => {\n  //       console.log(movie.title)\n  //       const movieRow = <MovieRow movie={movie} />\n  //       movieRows.push(movieRow)\n  //   })\n\n  //   this.state = {rows:movieRows}\n  // \n  this.performSearch(\"A\")\n}\n\nperformSearch(searchTerm){\n    console.log(\"Perform search\")\n    //const urlString = \"https://api.themoviedb.org/3/movie/550?api_key=5f91e661dd58e70db98e400cb6aafbcf\"\n    const tempURL = \"https://api.themoviedb.org/3/search/movie?api_key=5f91e661dd58e70db98e400cb6aafbcf&query=\" + searchTerm;\n    //const apiKey = '5f91e661dd58e70db98e400cb6aafbcf';\n    //const rootEndpoint = `https://api.themoviedb.org/3/movie/550?api_key=${apiKey}`;\n    //const city = event.target.elements.city.value;\n    //const endPoint = rootEndpoint + `&q=${city}&units=metric`; \n    \n    fetch(tempURL)\n    .then(response => response.json())\n    .then(searchResults => {\n        //console.log(results.results)\n        const results = searchResults.results\n        var movieRows = []\n        if (results != null)\n        {\n          results.forEach((movie) => {\n            movie.poster_src = \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" + movie.poster_path\n            const movieRow = <MovieRow key ={movie.id} movie ={movie} />\n            movieRows.push(movieRow)\n           })\n        }else \n        {\n          this.performSearch(\"A\")\n        }\n      this.setState({rows:movieRows})\n      });\n\n    // jQuery.ajax({\n    //   url:urlString ,\n    //   success:(searchResult) => {\n    //     console.log(\"Fetched data successfully\")\n    //   }\n    // })\n}\n\nsearchChangeHandler(event)\n{\n  console.log(event.target.value)\n  const boundObject = this\n  const searchTerm = event.target.value\n  boundObject.performSearch(searchTerm)\n}\n\n  render(){\n    return (\n      <div className=\"App\">\n          <table className = \"titleBar\" >\n            <tbody>\n              <tr>\n                <td><i className=\"fa fa-film\" id=\"Banner\" style = {{color:\"green\"}}></i></td>\n                <td width=\"8\" />\n                <td>Movies Search</td>\n              </tr>\n            </tbody>\n          </table>\n  \n          <input className=\"searchBar\" align=\"center\" onChange={this.searchChangeHandler.bind(this)} placeholder =\"Enter search term\"/>\n        {this.state.rows}\n      </div>\n    ); //return ends\n  } //render ends\n}//end class\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}